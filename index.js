var r=new Map;function a(t,e){let n=e;return function(){let i=()=>{n=null,t.apply(this,arguments)};n&&cancelAnimationFrame(n),n=requestAnimationFrame(i)}}function f(t,e){typeof t.onenter=="function"&&e.onenter.add(t.onenter),typeof t.onexit=="function"&&e.onexit.add(t.onexit),typeof t.onresize=="function"&&e.onresize.add(t.onresize),typeof t.oninit=="function"&&e.onresize.add(t.oninit)}function p(t){let e=Object.create(null);e.id=t.id,e.query=t.query||"all",e.active=!1,e.test=matchMedia(e.query),e.onenter=new Set,e.onexit=new Set,e.onresize=new Set,e.oninit=new Set,f(t,e);let n=()=>{e.oninit.size>0&&(e.oninit.forEach(o=>o()),e.oninit.clear()),e.onenter.forEach(o=>o()),e.active=!0},i=()=>{e.onexit.forEach(o=>o()),e.active=!1},s=o=>e.onresize.forEach(l=>l(o));e.test.matches&&n();let c=({matches:o})=>o?n():i(),d=()=>e.test.removeListener(c);return e.test.addListener(c),{onenter:n,onexit:i,onresize:s,destroy:d,get screen(){return e}}}var w=t=>{if(Array.isArray(t))return t.forEach(w);if(!("id"in t))throw new Error('viewports: Missing an "id" reference');let e=p(t),{id:n}=e.screen;r.size||addEventListener("resize",a(i=>{r.forEach(s=>{s.screen.active&&s.onresize(i.view.screenX)})},25),!0),r.has(n)?console.warn(`viewports: The id "${n}" is already defined, use viewports.add() instead.`):r.set(n,e)},u=t=>r.has(t)?r.get(t):!1,h=(t,e)=>{let n=u(t);if(n===!1)return console.error(`viewports: There is no viewport using id "${t}"`);f(e,n.screen),n.screen.test.matches&&n.onenter()},m=t=>{let e=Array.from(r.values()).map(({screen:n})=>n);return t?e.filter(({id:n})=>t.includes(n)):e},v=t=>{let e=m();if(t){let i=u(t);return i?i.screen.active:!1}let n=e.filter(({active:i})=>i===!0);return n.length>1?n:n[0]},y=t=>{r.has(t)&&(r.get(t).destroy(),r.delete(t))},g=()=>{removeEventListener("resize",a()),r.forEach(t=>t.destroy()),r.clear()};export{v as active,h as add,g as destroy,u as get,m as list,y as remove,w as screens,r as viewports};
